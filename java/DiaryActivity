package com.example.acivitychange;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.FileProvider;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import static android.os.Environment.DIRECTORY_PICTURES;
public class DiaryActivity extends AppCompatActivity {
    EditText diary;
    String diary_context;
    Button savebtn, Takepicbtn, Callpicbtn;
    ImageView ivPicture;

    private static final int REQUEST_IMAGE_CAPTURE = 672;
    private String imageFilePath;
    private Uri photoUri;
    private MediaScanner mMediaScanner;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_diary);

        Bundle extras = getIntent().getExtras();

        diary = (EditText) findViewById(R.id.editText);
        savebtn = (Button) findViewById(R.id.savebutton);

        savebtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                diary_context = diary.getText().toString();

            }
        });

        getSupportActionBar().setTitle( extras.getString("date") + "diary"); // main에서 받아온 data

        // 카메라
        mMediaScanner = MediaScanner.getInstance(getApplicationContext());

        Takepicbtn = (Button) findViewById(R.id.btnTakePicture);
        ivPicture = (ImageView) findViewById(R.id.ivPicture);
        Callpicbtn = (Button) findViewById(R.id.btncallpic);

        ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.CAMERA}, 1);

        Takepicbtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (ActivityCompat.checkSelfPermission(DiaryActivity.this, android.Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {

                }
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (intent.resolveActivity(getPackageManager()) != null) {
                    File photoFile = null;
                    try {
                        photoFile = createImageFile();
                    } catch (IOException e) {
                    }
                    if (photoFile != null){
                        photoUri = FileProvider.getUriForFile(getApplicationContext(), getPackageName(), photoFile);
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
                        startActivityForResult(intent, REQUEST_IMAGE_CAPTURE);
                    }
                }
            }
        });
        Callpicbtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                intent.setType("image/*");
                startActivityForResult(intent, 1);
            }
        });

    }

    private File createImageFile() throws IOException{
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "TEST_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,
                ".jpg",
                storageDir
        );
        imageFilePath = image.getAbsolutePath();
        return image;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK){
            Bitmap bitmap = BitmapFactory.decodeFile(imageFilePath);
            ExifInterface exif = null;

            try {
                exif = new ExifInterface(imageFilePath);
            } catch (IOException e){
                e.printStackTrace();
            }

            int exifOrientation;
            int exifDegree;

            if (exif != null){
                exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
                exifDegree = exifOrientationToDegress(exifOrientation);
            } else {
                exifDegree = 0;
            }
            String result = "";
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HHmmss", Locale.getDefault());
            Date curDate = new Date(System.currentTimeMillis());
            String filename = formatter.format(curDate);
            String strFolderName = Environment.getExternalStoragePublicDirectory(DIRECTORY_PICTURES) + File.separator + "mobile_poject" + File.separator;
            File file = new File(strFolderName);
            if (!file.exists())
                file.mkdirs();
            File f = new File(strFolderName + "/" + filename + ".png");
            result = f.getPath();

            FileOutputStream fout = null;
            try {
                fout = new FileOutputStream(f);
            } catch (FileNotFoundException e){
                e.printStackTrace();
                result = "Save Error fout";
            }
            rotate(bitmap, exifDegree).compress(Bitmap.CompressFormat.PNG, 70, fout);
            try {
                fout.flush();
            } catch (IOException e){
                e.printStackTrace();
            }
            try {
                fout.close();
                mMediaScanner.mediaScanning(strFolderName + "/" + filename + ".png");
            } catch (IOException e){
                e.printStackTrace();
                result = "File close Error";
            }
            ivPicture.setImageBitmap(rotate(bitmap, exifDegree));

        }
        if (requestCode == 1){
            if (resultCode == RESULT_OK){
                Uri uri = data.getData();
                ivPicture.setImageURI(uri);
            }
        }
    }
    private int exifOrientationToDegress(int exifOrientation){
        if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_90){
            return 90;
        } else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_180){
            return 180;
        } else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_270){
            return 270;
        }
        return 0;
    }
    private Bitmap rotate(Bitmap bitmap, float degree) {
        Matrix matrix = new Matrix();
        matrix.postRotate(degree);
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_actions, menu) ;

        return true ;
    }
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.back){
            // 전 액티비티 인텐트
            return true;
        }
        else
            return super.onOptionsItemSelected(item);
    }


}
